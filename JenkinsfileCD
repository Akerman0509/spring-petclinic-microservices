def commitIDs = [:]

pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }
    parameters {
        string(name: 'CUSTOMERS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for customers-service')
        string(name: 'VISITS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for visits-service')
        string(name: 'VETS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for vets-service')
        string(name: 'GENAI_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for genai-service')
    }
    environment {
        WORKSPACE = "${env.WORKSPACE}"
        // List of services without test folders       
        SERVICES_WITHOUT_TESTS = "spring-petclinic-admin-server spring-petclinic-genai-service"
        // Full list of services
        ALL_SERVICES = "spring-petclinic-admin-server spring-petclinic-api-gateway spring-petclinic-config-server spring-petclinic-customers-service spring-petclinic-discovery-server spring-petclinic-genai-service spring-petclinic-vets-service spring-petclinic-visits-service"
    }
    stages {
        stage('Check out Branch not Main and take out latest commitID') {
            steps {
                script {
                    echo  "customers-service branch: ${params.CUSTOMERS_SERVICE_BRANCH}"
                    echo  "visits-service branch: ${params.VISITS_SERVICE_BRANCH}"
                    echo  "vets-service branch: ${params.VETS_SERVICE_BRANCH}"
                    echo  "genai-service branch: ${params.GENAI_SERVICE_BRANCH}"
                    
                    // Check branches and get commit IDs for non-main branches
                    if (params.CUSTOMERS_SERVICE_BRANCH != 'main') {
                        commitIDs['spring-petclinic-customers-service'] = checkoutBranchAndGetCommitID('spring-petclinic-customers-service', params.CUSTOMERS_SERVICE_BRANCH)
                    }
                    
                    if (params.VISITS_SERVICE_BRANCH != 'main') {
                        commitIDs['spring-petclinic-visits-service'] = checkoutBranchAndGetCommitID('spring-petclinic-visits-service', params.VISITS_SERVICE_BRANCH)
                    }
                    
                    if (params.VETS_SERVICE_BRANCH != 'main') {
                        commitIDs['spring-petclinic-vets-service'] = checkoutBranchAndGetCommitID('spring-petclinic-vets-service', params.VETS_SERVICE_BRANCH)
                    }
                    
                    if (params.GENAI_SERVICE_BRANCH != 'main') {
                        commitIDs['spring-petclinic-genai-service'] = checkoutBranchAndGetCommitID('spring-petclinic-genai-service', params.GENAI_SERVICE_BRANCH)
                    }
                    
                    echo "Commit IDs: ${commitIDs}"
                }
            }
        }

        stage('update helm for changed service'){
            steps{
                script {
                    // Loop through commitIDs map and update Helm for each service
                    commitIDs.each { service, commitID ->
                        echo "Updating Helm for ${service} with commit ID ${commitID}"
                        updateHelm("akerman0509", service, commitID)
                    }
                }
            }
        }

        stage('Clean') {
            steps {
                echo 'Cleaning workspace and build artifacts...'
                deleteDir() 
            }
        }
    }
}

// Function to checkout a branch and get its commit ID
def checkoutBranchAndGetCommitID(String servicePath, String branchName) {
    echo "Checking out ${servicePath} branch ${branchName}"
    dir(servicePath) {
        checkout scm
        // sh "git checkout ${branchName}"

        sh """
            git fetch origin
            git checkout ${branchName}
        """
        def commitID = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
        echo "Checked out ${servicePath} branch ${branchName} with commit ID: ${commitID}"
        return commitID
    }
}

def updateHelm(String docker_user, String service, String commitID){
    // def helmChart = "spring-petclinic-helm"
    // def helmValues = "spring-petclinic-helm/values.yaml"
    // def imageName = "akerman0509/${service}"
    
    // sh """
    //     helm upgrade --install --namespace=${namespace} --create-namespace ${service}-${commitID} -f ${helmValues} ${helmChart} \
    //     --set image.repository=${imageName} \
    //     --set image.tag=${commitID}
    // """


    def helmChart="./k8s"
    def helmValues="./k8s/values.yaml"
    def imageName=docker_user + "/"+ service
    def namespace = "test-${commitID}"
    echo "namespace: ${namespace}"
    echo "imageName: ${imageName}"
    echo "commitID: ${commitID}"
    // sh """
    //     helm upgrade --install --namespace=${namespace} --create-namespace ${service}-${commitID} -f ${helmValues} ${helmChart} \
    //     --set image.repository=${imageName} \
    //     --set image.tag=${commitID}
    // """

}